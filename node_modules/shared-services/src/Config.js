"use strict";

let activeconf = require("./config.json"); // cannot be a const since we are merging
const Stage = require("./Stage");
const _ = require("lodash");

class Config {
	/**
	* contructor of Config class
	* @param {string} stage (e.g. development-bilal,production,testing)
    * @param {string} user-config (e.g. ./user-config.json)
	* @returns
	*/
    constructor() {

        this.addConfigFile();

    }

	/**
	* get a setting for a given key
	* @param {string} key (e.g. outbox or queues.log)
	* @returns
	*/
    getKey(key) {

        const stage = new Stage();

        const localStage = stage.getStage();

        let setting;
        // key = "queues.log" activeconf["development-edax"]
        if (activeconf[localStage]) {

            setting = _.get(activeconf[localStage], key);
            // if we cannot find it we will search a default
            if (typeof setting === "undefined") {
                // now search in default
                setting = _.get(activeconf.default, key);
                // check whether default is found otherwise raise error
                if (typeof setting === "undefined") {
                    throw Error(`Key:${key} does not exists in default or stage: ${stage}`);
                }
            }

        } else {
            throw Error(`No data for stage ${localStage} in configuration`);
        }

        return setting;

    }


    /**
     * Add additional configuration file to system. Alternatly you can specify the file in
     * process.env.XBEE_ADD_CONFIGS
     * @param {any} fileName (path to file)
     *
     * @memberOf Config
     */
    addConfigFile(fileName) {
        let addFile = fileName;
        // if we do not have a filename argument we will check process.env for option
        if (typeof fileName === "undefined" && typeof process.env.XBEE_ADD_CONFIG !== "undefined") {
            try {
                addFile = process.env.XBEE_ADD_CONFIG;
                const userconf = require(addFile);
                activeconf = _.merge(activeconf, userconf);

            } catch (error) {
                throw Error(`Cannot add ${addFile} file to active configuration`);
            }
        }

    }

	/**
	* set a paramter key to determine extra configuration files to be loaded. used in testing.
	* @param {string} key (e.g. outbox)
	* @returns
	*/
    setFileName(fileName) {
        this.addConfigFile(fileName);
    }
}

module.exports = Config;


