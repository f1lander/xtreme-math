"use strict";

const Config = require("../src/config");
const assert = require("assert");

// ideally you write a test file config for the test config folder
// you do this before all test, then remove the file after all test
// this is when you can use the special purpose functions before all and after all
// need tests for merged file

describe("Config Config Module", () => {

    describe("# Config 1 - stage, key parameter", () => {

        it("should return a config key when passed valid stage and key in as parameter", () => {

            const mykey = "queues.log";

            const myConfig = new Config("development-edax", "./user-config.json");

            assert.equal(myConfig.getKey(mykey), "ARN", "the returned stage does not match parameter provided to class");
        });

        it("should return an error when passed stage doesn't exists and valid key in as parameter", () => {

            const mykey = "outbox";
            const myConfig = new Config("dessv", "./user-config.json");

            assert.throws(() => myConfig.getKey(mykey), Error);
        });

        it("should return a default when passed invalid key, user-config and valid stage in as parameter", () => {

            const mykey = "outboxxxxx";
            const myConfig = new Config("development-edax");
            assert.equal("ARN", myConfig.getKey(mykey).queues.log);
        });

        it("should return an error when passed invalid key and stage in as parameter", () => {

            const mykey = "outboxxxxx";
            const myConfig = new Config("development-edaxxx", "./user-config.json");

            assert.throws(() => myConfig.getKey(mykey), Error);
        });

        it("should return an error when passed invalid key and undefined stage in as parameter", () => {

            const mykey = "outboxxxxx";
            const myConfig = new Config(null, "./user-config.json");

            assert.throws(() => myConfig.getKey(mykey), Error);
        });

        it("should return an error when passed invalid key and undefined stage in as parameter", () => {

            const myConfig = new Config(null, "./user-config.json");

            assert.throws(() => myConfig.getKey(), Error);
        });

    });

    // need test for retrieving data from merged file so a success file is needed
    // this file should be generated before all tests (you would have found a bug in that case)
    describe("# Config 2 Set fileName - filename parameter", () => {

        it("sould return an error when trying to set a undefined filename because doesn't exists", () => {

            const myConfig = new Config();

            assert.throws(() => myConfig.setFileName(), Error);
        });

        
    });

});

