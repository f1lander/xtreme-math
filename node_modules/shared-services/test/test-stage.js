"use strict";

const Stage = require("../src/Stage");
const assert = require("assert");

describe("Config Stage Class", () => {

    describe("# Stage 1 - parameter", () => {

        it("should return stage when passed in as parameter", () => {
            const myStage = new Stage("dev");
            assert.equal(myStage.getStage(), "dev", "the returned stage does not match parameter provided to class");
        });

        it("should set the stage when calling setStage function", () => {
            const myStage = new Stage("dev");
            assert.equal(myStage.getStage(), "dev", "the returned stage does not match parameter provided to class");
            // now change the stage and check
            myStage.setStage("duck");
            assert.equal(myStage.getStage(), "duck", "the returned stage does not match parameter provided to class");
        });

        it("should return error with text 'Cannot determinate the stage' when empty constructor and no env variable or function", () => {
            // need to delete process.env variables
            delete process.env.XBEE_STAGE;
            delete process.env.AWS_LAMBDA_FUNCTION_NAME;
            const myStage = new Stage();

            // check that correct error is thrown
            assert.throws(myStage.getStage, Error);
        });

    });


    describe("# Stage 2 - from environmental variable XBEE_STAGE", () => {
        it("should retrieve the stage name from process.env.XBEE_STAGE", () => {
            process.env.XBEE_STAGE = "duck2";
            const myStage = new Stage();
            assert.equal(myStage.getStage(), "duck2", "the returned stage does not match parameter provided to class");
        });
    });


    describe("# Stage 3 - return stage from AWS function name", () => {

        it("should return development stage when passed in second parameter", () => {
            delete process.env.XBEE_STAGE;
            process.env.AWS_LAMBDA_FUNCTION_NAME = "aws-dev-edax-copyFunction";
            const myStage = new Stage();
            assert.equal(myStage.getStage(), "development-edax", "the returned stage does not match parameter provided to class");
        });

        it("should return an error for incorrect parameter set", () => {
            delete process.env.XBEE_STAGE;
            process.env.AWS_LAMBDA_FUNCTION_NAME = "aws-jsj-edax-copyFunction";
            const myStage = new Stage();
            assert.throws(myStage.getStage, Error);
        });

        it("should return production stage when passed in as correct parameter", () => {
            delete process.env.XBEE_STAGE;
            process.env.AWS_LAMBDA_FUNCTION_NAME = "copyservice-prod-copyFunction";
            const myStage = new Stage();
            assert.equal(myStage.getStage(), "production", "the returned stage does not match parameter provided to class");
        });

        it("should return an error for a bad function name", () => {
            delete process.env.XBEE_STAGE;
            process.env.AWS_LAMBDA_FUNCTION_NAME = "mysuperfunction";
            const myStage = new Stage();
            assert.throws(myStage.getStage, Error);
        });

    });

});
